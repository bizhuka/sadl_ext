<?xml version="1.0" encoding="utf-8"?>
<abapGit version="v1.0.0" serializer="LCL_OBJECT_ENHO" serializer_version="v1.0.0">
 <asx:abap xmlns:asx="http://www.sap.com/abapxml" version="1.0">
  <asx:values>
   <TOOL>HOOK_IMPL</TOOL>
   <SHORTTEXT>Call ZIF_SADL_READ_RUNTIME-&gt;execute( )</SHORTTEXT>
   <ORIGINAL_OBJECT>
    <PGMID>R3TR</PGMID>
    <ORG_OBJ_TYPE>CLAS</ORG_OBJ_TYPE>
    <ORG_OBJ_NAME>CL_SADL_ABQI</ORG_OBJ_NAME>
    <ORG_MAIN_TYPE>CLAS</ORG_MAIN_TYPE>
    <ORG_MAIN_NAME>CL_SADL_ABQI</ORG_MAIN_NAME>
    <PROGRAMNAME>CL_SADL_ABQI==================CP</PROGRAMNAME>
   </ORIGINAL_OBJECT>
   <ENHANCEMENTS>
    <ENH_HOOK_IMPL>
     <PROGRAMNAME>CL_SADL_ABQI==================CP</PROGRAMNAME>
     <ENHMODE>D</ENHMODE>
     <FULL_NAME>\TY:CL_SADL_ABQI\IN:IF_SADL_ABQI\ME:SELECT\SE:END\EI</FULL_NAME>
     <SOURCE>
      <item/>
      <item>CHECK mo_mdp IS NOT INITIAL</item>
      <item>AND mv_entity_id CP &apos;CDS_Z*&apos;.</item>
      <item/>
      <item>TRY.</item>
      <item>DATA(ls_zabap_load) = mo_mdp-&gt;get_entity_load_by_id( mv_entity_id ).</item>
      <item>CATCH cx_sadl_contract_violation.</item>
      <item>CLEAR ls_zabap_load.</item>
      <item>ENDTRY.</item>
      <item>CHECK ls_zabap_load IS NOT INITIAL.</item>
      <item/>
      <item>ASSIGN ls_zabap_load-&gt;sadl_entity-cds_entity_annotations[ annoname = zcl_sadl_annotation_ext=&gt;id ] TO FIELD-SYMBOL(&lt;ls_zabap_anno&gt;).</item>
      <item>CHECK sy-subrc = 0.</item>
      <item/>
      <item>DATA(lo_sadl_exit) = zcl_sadl_annotation_ext=&gt;create( &lt;ls_zabap_anno&gt;-value ).</item>
      <item>CHECK lo_sadl_exit IS NOT INITIAL</item>
      <item>AND lo_sadl_exit IS INSTANCE OF zif_sadl_read_runtime.</item>
      <item/>
      <item>zcl_sadl_filter=&gt;get_filter( EXPORTING it_sadl_conditions    = lt_complex_condition</item>
      <item>it_condition_provider = mt_condition_providers</item>
      <item>IMPORTING ev_where              = DATA(lv_zabap_where)</item>
      <item>et_range              = DATA(lt_zabap_range) ).</item>
      <item/>
      <item>CAST zif_sadl_read_runtime( lo_sadl_exit</item>
      <item>)-&gt;execute( EXPORTING iv_node_name       = ls_zabap_load-&gt;sadl_entity-node_name</item>
      <item>it_range           = lt_zabap_range</item>
      <item>iv_where           = lv_zabap_where</item>
      <item>is_requested       = is_requested</item>
      <item>CHANGING  ct_data_rows       = et_data_rows</item>
      <item>cv_number_all_hits = ev_number_all_hits ).</item>
     </SOURCE>
    </ENH_HOOK_IMPL>
    <ENH_HOOK_IMPL>
     <PROGRAMNAME>CL_SADL_ABQI==================CP</PROGRAMNAME>
     <ENHMODE>D</ENHMODE>
     <FULL_NAME>\TY:CL_SADL_ABQI\ME:_ADD_CONDITION\SE:END\EI</FULL_NAME>
     <SOURCE>
      <item/>
      <item>CHECK mo_mdp IS NOT INITIAL</item>
      <item>AND mv_entity_id CP &apos;CDS_Z*&apos;.</item>
      <item/>
      <item>TRY.</item>
      <item>DATA(ls_zabap_load) = mo_mdp-&gt;get_entity_load_by_id( mv_entity_id ).</item>
      <item>CATCH cx_sadl_contract_violation.</item>
      <item>CLEAR ls_zabap_load.</item>
      <item>ENDTRY.</item>
      <item>CHECK ls_zabap_load IS NOT INITIAL.</item>
      <item/>
      <item>ASSIGN ls_zabap_load-&gt;sadl_entity-cds_entity_annotations[ annoname = zcl_sadl_annotation_ext=&gt;id ] TO FIELD-SYMBOL(&lt;ls_zabap_anno&gt;).</item>
      <item>CHECK sy-subrc = 0.</item>
      <item/>
      <item>DATA(lo_sadl_exit) = zcl_sadl_annotation_ext=&gt;create( &lt;ls_zabap_anno&gt;-value ).</item>
      <item>CHECK lo_sadl_exit IS NOT INITIAL</item>
      <item>AND lo_sadl_exit IS INSTANCE OF zif_sadl_prepare_read_runtime.</item>
      <item/>
      <item>zcl_sadl_filter=&gt;get_filter( EXPORTING it_sadl_conditions    = ct_condition</item>
      <item>it_condition_provider = mt_condition_providers</item>
      <item>IMPORTING ev_where              = DATA(lv_zabap_where)</item>
      <item>et_range              = DATA(lt_zabap_range) ).</item>
      <item/>
      <item>CAST zif_sadl_prepare_read_runtime( lo_sadl_exit</item>
      <item>)-&gt;change_condition( EXPORTING iv_node_name       = ls_zabap_load-&gt;sadl_entity-node_name</item>
      <item>it_range           = lt_zabap_range</item>
      <item>iv_where           = lv_zabap_where</item>
      <item>CHANGING  ct_sadl_condition  = ct_condition ).</item>
      <item/>
     </SOURCE>
    </ENH_HOOK_IMPL>
   </ENHANCEMENTS>
   <SPACES>
    <item>
     <FULL_NAME>\TY:CL_SADL_ABQI\IN:IF_SADL_ABQI\ME:SELECT\SE:END\EI</FULL_NAME>
     <SPACES>
      <item>0</item>
      <item>3</item>
      <item>5</item>
      <item>0</item>
      <item>3</item>
      <item>5</item>
      <item>3</item>
      <item>5</item>
      <item>3</item>
      <item>3</item>
      <item>0</item>
      <item>3</item>
      <item>3</item>
      <item>0</item>
      <item>3</item>
      <item>3</item>
      <item>5</item>
      <item>0</item>
      <item>3</item>
      <item>42</item>
      <item>32</item>
      <item>42</item>
      <item>0</item>
      <item>3</item>
      <item>15</item>
      <item>37</item>
      <item>37</item>
      <item>37</item>
      <item>27</item>
      <item>37</item>
     </SPACES>
    </item>
    <item>
     <FULL_NAME>\TY:CL_SADL_ABQI\ME:_ADD_CONDITION\SE:END\EI</FULL_NAME>
     <SPACES>
      <item>0</item>
      <item>3</item>
      <item>5</item>
      <item>0</item>
      <item>3</item>
      <item>5</item>
      <item>3</item>
      <item>5</item>
      <item>3</item>
      <item>3</item>
      <item>0</item>
      <item>3</item>
      <item>3</item>
      <item>0</item>
      <item>3</item>
      <item>3</item>
      <item>5</item>
      <item>0</item>
      <item>3</item>
      <item>42</item>
      <item>32</item>
      <item>42</item>
      <item>0</item>
      <item>3</item>
      <item>15</item>
      <item>46</item>
      <item>46</item>
      <item>36</item>
      <item>0</item>
     </SPACES>
    </item>
   </SPACES>
  </asx:values>
 </asx:abap>
</abapGit>
